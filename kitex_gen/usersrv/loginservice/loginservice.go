// Code generated by Kitex v0.5.2. DO NOT EDIT.

package loginservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	usersrv "myWeb/kitex_gen/usersrv"
)

func serviceInfo() *kitex.ServiceInfo {
	return loginServiceServiceInfo
}

var loginServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LoginService"
	handlerType := (*usersrv.LoginService)(nil)
	methods := map[string]kitex.MethodInfo{
		"EmailLogin":            kitex.NewMethodInfo(emailLoginHandler, newLoginServiceEmailLoginArgs, newLoginServiceEmailLoginResult, false),
		"SendEmail":             kitex.NewMethodInfo(sendEmailHandler, newLoginServiceSendEmailArgs, newLoginServiceSendEmailResult, false),
		"UsernamePasswordLogin": kitex.NewMethodInfo(usernamePasswordLoginHandler, newLoginServiceUsernamePasswordLoginArgs, newLoginServiceUsernamePasswordLoginResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "usersrv",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func emailLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersrv.LoginServiceEmailLoginArgs)
	realResult := result.(*usersrv.LoginServiceEmailLoginResult)
	success, err := handler.(usersrv.LoginService).EmailLogin(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLoginServiceEmailLoginArgs() interface{} {
	return usersrv.NewLoginServiceEmailLoginArgs()
}

func newLoginServiceEmailLoginResult() interface{} {
	return usersrv.NewLoginServiceEmailLoginResult()
}

func sendEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersrv.LoginServiceSendEmailArgs)
	realResult := result.(*usersrv.LoginServiceSendEmailResult)
	success, err := handler.(usersrv.LoginService).SendEmail(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLoginServiceSendEmailArgs() interface{} {
	return usersrv.NewLoginServiceSendEmailArgs()
}

func newLoginServiceSendEmailResult() interface{} {
	return usersrv.NewLoginServiceSendEmailResult()
}

func usernamePasswordLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usersrv.LoginServiceUsernamePasswordLoginArgs)
	realResult := result.(*usersrv.LoginServiceUsernamePasswordLoginResult)
	success, err := handler.(usersrv.LoginService).UsernamePasswordLogin(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLoginServiceUsernamePasswordLoginArgs() interface{} {
	return usersrv.NewLoginServiceUsernamePasswordLoginArgs()
}

func newLoginServiceUsernamePasswordLoginResult() interface{} {
	return usersrv.NewLoginServiceUsernamePasswordLoginResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EmailLogin(ctx context.Context, request *usersrv.EmailLoginRequest) (r *usersrv.EmailLoginResponse, err error) {
	var _args usersrv.LoginServiceEmailLoginArgs
	_args.Request = request
	var _result usersrv.LoginServiceEmailLoginResult
	if err = p.c.Call(ctx, "EmailLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendEmail(ctx context.Context, request *usersrv.SendEmailRequest) (r *usersrv.SendEmailResponse, err error) {
	var _args usersrv.LoginServiceSendEmailArgs
	_args.Request = request
	var _result usersrv.LoginServiceSendEmailResult
	if err = p.c.Call(ctx, "SendEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UsernamePasswordLogin(ctx context.Context, request *usersrv.UsernamePasswordLoginRequest) (r *usersrv.UsernamePasswordLoginResponse, err error) {
	var _args usersrv.LoginServiceUsernamePasswordLoginArgs
	_args.Request = request
	var _result usersrv.LoginServiceUsernamePasswordLoginResult
	if err = p.c.Call(ctx, "UsernamePasswordLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
