// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package userInfo

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Age, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *User) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Profession, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Department, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Province, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.City, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Flag, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserRequest[number], err)
}

func (x *UpdateUserRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Age, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Profession, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Department, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Province, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.City, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserRequest) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Flag, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateUserResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserResponse[number], err)
}

func (x *UpdateUserResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateUserResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChangePasswordRequest[number], err)
}

func (x *ChangePasswordRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ConfirmNewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChangePasswordResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChangePasswordResponse[number], err)
}

func (x *ChangePasswordResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ChangePasswordResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ResetPasswordRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ResetPasswordRequest[number], err)
}

func (x *ResetPasswordRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ResetPasswordRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Credential, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ResetPasswordResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ResetPasswordResponse[number], err)
}

func (x *ResetPasswordResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ResetPasswordResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserRequest[number], err)
}

func (x *GetUserRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserResponse[number], err)
}

func (x *GetUserResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetUserResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *User) fastWriteField4(buf []byte) (offset int) {
	if x.Age == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetAge())
	return offset
}

func (x *User) fastWriteField5(buf []byte) (offset int) {
	if x.Profession == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetProfession())
	return offset
}

func (x *User) fastWriteField6(buf []byte) (offset int) {
	if x.Department == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDepartment())
	return offset
}

func (x *User) fastWriteField7(buf []byte) (offset int) {
	if x.Province == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetProvince())
	return offset
}

func (x *User) fastWriteField8(buf []byte) (offset int) {
	if x.City == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetCity())
	return offset
}

func (x *User) fastWriteField9(buf []byte) (offset int) {
	if !x.Flag {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetFlag())
	return offset
}

func (x *UpdateUserRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *UpdateUserRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateUserRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateUserRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *UpdateUserRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Age == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetAge())
	return offset
}

func (x *UpdateUserRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Profession == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetProfession())
	return offset
}

func (x *UpdateUserRequest) fastWriteField6(buf []byte) (offset int) {
	if x.Department == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDepartment())
	return offset
}

func (x *UpdateUserRequest) fastWriteField7(buf []byte) (offset int) {
	if x.Province == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetProvince())
	return offset
}

func (x *UpdateUserRequest) fastWriteField8(buf []byte) (offset int) {
	if x.City == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetCity())
	return offset
}

func (x *UpdateUserRequest) fastWriteField9(buf []byte) (offset int) {
	if !x.Flag {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetFlag())
	return offset
}

func (x *UpdateUserResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateUserResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *UpdateUserResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *ChangePasswordRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ChangePasswordRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ChangePasswordRequest) fastWriteField2(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOldPassword())
	return offset
}

func (x *ChangePasswordRequest) fastWriteField3(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewPassword())
	return offset
}

func (x *ChangePasswordRequest) fastWriteField4(buf []byte) (offset int) {
	if x.ConfirmNewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetConfirmNewPassword())
	return offset
}

func (x *ChangePasswordResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ChangePasswordResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *ChangePasswordResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *ResetPasswordRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ResetPasswordRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *ResetPasswordRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Credential == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCredential())
	return offset
}

func (x *ResetPasswordResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ResetPasswordResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *ResetPasswordResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *GetUserRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetUserResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetUserResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetUserResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *GetUserResponse) fastWriteField3(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetUser())
	return offset
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *User) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *User) sizeField4() (n int) {
	if x.Age == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetAge())
	return n
}

func (x *User) sizeField5() (n int) {
	if x.Profession == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetProfession())
	return n
}

func (x *User) sizeField6() (n int) {
	if x.Department == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDepartment())
	return n
}

func (x *User) sizeField7() (n int) {
	if x.Province == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetProvince())
	return n
}

func (x *User) sizeField8() (n int) {
	if x.City == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetCity())
	return n
}

func (x *User) sizeField9() (n int) {
	if !x.Flag {
		return n
	}
	n += fastpb.SizeBool(9, x.GetFlag())
	return n
}

func (x *UpdateUserRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *UpdateUserRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateUserRequest) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateUserRequest) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *UpdateUserRequest) sizeField4() (n int) {
	if x.Age == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetAge())
	return n
}

func (x *UpdateUserRequest) sizeField5() (n int) {
	if x.Profession == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetProfession())
	return n
}

func (x *UpdateUserRequest) sizeField6() (n int) {
	if x.Department == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDepartment())
	return n
}

func (x *UpdateUserRequest) sizeField7() (n int) {
	if x.Province == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetProvince())
	return n
}

func (x *UpdateUserRequest) sizeField8() (n int) {
	if x.City == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetCity())
	return n
}

func (x *UpdateUserRequest) sizeField9() (n int) {
	if !x.Flag {
		return n
	}
	n += fastpb.SizeBool(9, x.GetFlag())
	return n
}

func (x *UpdateUserResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateUserResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *UpdateUserResponse) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *ChangePasswordRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ChangePasswordRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *ChangePasswordRequest) sizeField2() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOldPassword())
	return n
}

func (x *ChangePasswordRequest) sizeField3() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewPassword())
	return n
}

func (x *ChangePasswordRequest) sizeField4() (n int) {
	if x.ConfirmNewPassword == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetConfirmNewPassword())
	return n
}

func (x *ChangePasswordResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ChangePasswordResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *ChangePasswordResponse) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *ResetPasswordRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ResetPasswordRequest) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *ResetPasswordRequest) sizeField2() (n int) {
	if x.Credential == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCredential())
	return n
}

func (x *ResetPasswordResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ResetPasswordResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *ResetPasswordResponse) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *GetUserRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *GetUserResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetUserResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *GetUserResponse) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *GetUserResponse) sizeField3() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetUser())
	return n
}

var fieldIDToName_User = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Password",
	4: "Age",
	5: "Profession",
	6: "Department",
	7: "Province",
	8: "City",
	9: "Flag",
}

var fieldIDToName_UpdateUserRequest = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Password",
	4: "Age",
	5: "Profession",
	6: "Department",
	7: "Province",
	8: "City",
	9: "Flag",
}

var fieldIDToName_UpdateUserResponse = map[int32]string{
	1: "StatusCode",
	2: "Description",
}

var fieldIDToName_ChangePasswordRequest = map[int32]string{
	1: "Id",
	2: "OldPassword",
	3: "NewPassword",
	4: "ConfirmNewPassword",
}

var fieldIDToName_ChangePasswordResponse = map[int32]string{
	1: "StatusCode",
	2: "Description",
}

var fieldIDToName_ResetPasswordRequest = map[int32]string{
	1: "Email",
	2: "Credential",
}

var fieldIDToName_ResetPasswordResponse = map[int32]string{
	1: "StatusCode",
	2: "Description",
}

var fieldIDToName_GetUserRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetUserResponse = map[int32]string{
	1: "StatusCode",
	2: "Description",
	3: "User",
}
