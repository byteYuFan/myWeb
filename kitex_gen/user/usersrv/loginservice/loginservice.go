// Code generated by Kitex v0.5.2. DO NOT EDIT.

package loginservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	usersrv "myWeb/kitex_gen/user/usersrv"
)

func serviceInfo() *kitex.ServiceInfo {
	return loginServiceServiceInfo
}

var loginServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LoginService"
	handlerType := (*usersrv.LoginService)(nil)
	methods := map[string]kitex.MethodInfo{
		"EmailLogin":            kitex.NewMethodInfo(emailLoginHandler, newEmailLoginArgs, newEmailLoginResult, false),
		"SendEmail":             kitex.NewMethodInfo(sendEmailHandler, newSendEmailArgs, newSendEmailResult, false),
		"UsernamePasswordLogin": kitex.NewMethodInfo(usernamePasswordLoginHandler, newUsernamePasswordLoginArgs, newUsernamePasswordLoginResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "usersrv",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func emailLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(usersrv.EmailLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(usersrv.LoginService).EmailLogin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *EmailLoginArgs:
		success, err := handler.(usersrv.LoginService).EmailLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EmailLoginResult)
		realResult.Success = success
	}
	return nil
}
func newEmailLoginArgs() interface{} {
	return &EmailLoginArgs{}
}

func newEmailLoginResult() interface{} {
	return &EmailLoginResult{}
}

type EmailLoginArgs struct {
	Req *usersrv.EmailLoginRequest
}

func (p *EmailLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(usersrv.EmailLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EmailLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EmailLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EmailLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in EmailLoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *EmailLoginArgs) Unmarshal(in []byte) error {
	msg := new(usersrv.EmailLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EmailLoginArgs_Req_DEFAULT *usersrv.EmailLoginRequest

func (p *EmailLoginArgs) GetReq() *usersrv.EmailLoginRequest {
	if !p.IsSetReq() {
		return EmailLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EmailLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmailLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EmailLoginResult struct {
	Success *usersrv.EmailLoginResponse
}

var EmailLoginResult_Success_DEFAULT *usersrv.EmailLoginResponse

func (p *EmailLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(usersrv.EmailLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EmailLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EmailLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EmailLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in EmailLoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *EmailLoginResult) Unmarshal(in []byte) error {
	msg := new(usersrv.EmailLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EmailLoginResult) GetSuccess() *usersrv.EmailLoginResponse {
	if !p.IsSetSuccess() {
		return EmailLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EmailLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*usersrv.EmailLoginResponse)
}

func (p *EmailLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailLoginResult) GetResult() interface{} {
	return p.Success
}

func sendEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(usersrv.SendEmailRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(usersrv.LoginService).SendEmail(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendEmailArgs:
		success, err := handler.(usersrv.LoginService).SendEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendEmailResult)
		realResult.Success = success
	}
	return nil
}
func newSendEmailArgs() interface{} {
	return &SendEmailArgs{}
}

func newSendEmailResult() interface{} {
	return &SendEmailResult{}
}

type SendEmailArgs struct {
	Req *usersrv.SendEmailRequest
}

func (p *SendEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(usersrv.SendEmailRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendEmailArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendEmailArgs) Unmarshal(in []byte) error {
	msg := new(usersrv.SendEmailRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendEmailArgs_Req_DEFAULT *usersrv.SendEmailRequest

func (p *SendEmailArgs) GetReq() *usersrv.SendEmailRequest {
	if !p.IsSetReq() {
		return SendEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendEmailResult struct {
	Success *usersrv.SendEmailResponse
}

var SendEmailResult_Success_DEFAULT *usersrv.SendEmailResponse

func (p *SendEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(usersrv.SendEmailResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendEmailResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendEmailResult) Unmarshal(in []byte) error {
	msg := new(usersrv.SendEmailResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendEmailResult) GetSuccess() *usersrv.SendEmailResponse {
	if !p.IsSetSuccess() {
		return SendEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*usersrv.SendEmailResponse)
}

func (p *SendEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendEmailResult) GetResult() interface{} {
	return p.Success
}

func usernamePasswordLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(usersrv.UsernamePasswordLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(usersrv.LoginService).UsernamePasswordLogin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UsernamePasswordLoginArgs:
		success, err := handler.(usersrv.LoginService).UsernamePasswordLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UsernamePasswordLoginResult)
		realResult.Success = success
	}
	return nil
}
func newUsernamePasswordLoginArgs() interface{} {
	return &UsernamePasswordLoginArgs{}
}

func newUsernamePasswordLoginResult() interface{} {
	return &UsernamePasswordLoginResult{}
}

type UsernamePasswordLoginArgs struct {
	Req *usersrv.UsernamePasswordLoginRequest
}

func (p *UsernamePasswordLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(usersrv.UsernamePasswordLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UsernamePasswordLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UsernamePasswordLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UsernamePasswordLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UsernamePasswordLoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UsernamePasswordLoginArgs) Unmarshal(in []byte) error {
	msg := new(usersrv.UsernamePasswordLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UsernamePasswordLoginArgs_Req_DEFAULT *usersrv.UsernamePasswordLoginRequest

func (p *UsernamePasswordLoginArgs) GetReq() *usersrv.UsernamePasswordLoginRequest {
	if !p.IsSetReq() {
		return UsernamePasswordLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UsernamePasswordLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UsernamePasswordLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UsernamePasswordLoginResult struct {
	Success *usersrv.UsernamePasswordLoginResponse
}

var UsernamePasswordLoginResult_Success_DEFAULT *usersrv.UsernamePasswordLoginResponse

func (p *UsernamePasswordLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(usersrv.UsernamePasswordLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UsernamePasswordLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UsernamePasswordLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UsernamePasswordLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UsernamePasswordLoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UsernamePasswordLoginResult) Unmarshal(in []byte) error {
	msg := new(usersrv.UsernamePasswordLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UsernamePasswordLoginResult) GetSuccess() *usersrv.UsernamePasswordLoginResponse {
	if !p.IsSetSuccess() {
		return UsernamePasswordLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UsernamePasswordLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*usersrv.UsernamePasswordLoginResponse)
}

func (p *UsernamePasswordLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UsernamePasswordLoginResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EmailLogin(ctx context.Context, Req *usersrv.EmailLoginRequest) (r *usersrv.EmailLoginResponse, err error) {
	var _args EmailLoginArgs
	_args.Req = Req
	var _result EmailLoginResult
	if err = p.c.Call(ctx, "EmailLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendEmail(ctx context.Context, Req *usersrv.SendEmailRequest) (r *usersrv.SendEmailResponse, err error) {
	var _args SendEmailArgs
	_args.Req = Req
	var _result SendEmailResult
	if err = p.c.Call(ctx, "SendEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UsernamePasswordLogin(ctx context.Context, Req *usersrv.UsernamePasswordLoginRequest) (r *usersrv.UsernamePasswordLoginResponse, err error) {
	var _args UsernamePasswordLoginArgs
	_args.Req = Req
	var _result UsernamePasswordLoginResult
	if err = p.c.Call(ctx, "UsernamePasswordLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
